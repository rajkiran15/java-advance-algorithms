import java.util.*;
import java.util.HashMap;
import java.util.Scanner;

 class Edge{
	  int src;
	  int dest;
	  int wt;
	  Edge(int src,int dest,int wt){
		  this.src=src;
		  this.dest=dest;
		  this.wt=wt;
	  }
  }
 
 class Pair implements Comparable<Pair> {
	 int v;
	 String psf;
	 int wsf;
	 
	 Pair(int v,String psf,int wsf){
		 this.v=v;
		 this.psf=psf;
		 this.wsf=wsf;
	 }
	 
	 public int compareTo(Pair o) {
		 return this.wsf - o.wsf;
	 }
 }

public class FirstProject{
	ArrayList<Edge> graph[];
	int V;
	FirstProject(int v){
		this.V=v;
		graph=new ArrayList[this.V];
		for(int i=0;i<V;i++) {
			graph[i]=new ArrayList<Edge>();
		}
	}

	void addEdge(int src,int dest,int wt) {
		graph[src].add(new Edge(src,dest,wt));
		graph[dest].add(new Edge(dest,src,wt));
	}
   
	void DijkStra(int start) {
		
	   PriorityQueue<Pair> pq=new PriorityQueue<Pair>();
	   pq.add(new Pair(start,start+"",0));
	   boolean visited[]=new boolean[V];
	   
	   while(pq.size() > 0) {
		   Pair rem=pq.remove();
		   if(visited[rem.v] == true) {
			   continue;
		   }
		   visited[rem.v]=true;
		   System.out.println(rem.v+" "+rem.psf+" "+rem.wsf+" ");
		   for(Edge e:graph[rem.v]) {
			   if(visited[e.dest] == false) {
				   pq.add(new Pair(e.dest,rem.psf+e.dest,rem.wsf+e.wt));
			   }
		   }
	   }
	   
	}
	
   public static void main(String[] args)
    {
	   int V=9;
	   FirstProject graph=new FirstProject(V);
	   graph.addEdge(0, 1,4);graph.addEdge(0, 7,8);graph.addEdge(1, 2,8);
	   graph.addEdge(1,7,11);graph.addEdge(7,8,7);graph.addEdge(7,6,1);
	   graph.addEdge(6, 8,6);graph.addEdge(8, 2,2);graph.addEdge(2, 5,4);
	   graph.addEdge(2, 3,7);graph.addEdge(3, 4,9);graph.addEdge(3, 5,14);
	   graph.addEdge(4, 5,10);graph.addEdge(6, 5,2);
	   graph.DijkStra(0);
	}
}
